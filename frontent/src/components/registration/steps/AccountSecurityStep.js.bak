import React, { useState } from 'react';

const AccountSecurityStep = ({ formData, updateFormData, errors }) => {
  const [passwordStrength, setPasswordStrength] = useState(0);
  const [showPassword, setShowPassword] = useState(false);
  const [showConfirmPassword, setShowConfirmPassword] = useState(false);

  const securityQuestions = [
    "What is your mother's maiden name?",
    "What was the name of your first pet?",
    "What city were you born in?",
    "What is your favorite book?",
    "What was the model of your first car?",
    "What is the name of the street you grew up on?",
    "What is your favorite food?",
    "What was your childhood nickname?",
    "What is the name of your favorite teacher?",
    "What is your favorite movie?"
  ];

  const handleInputChange = (field, value) => {
    updateFormData({ [field]: value });

    // Calculate password strength
    if (field === 'password') {
      calculatePasswordStrength(value);
    }
  };

  const calculatePasswordStrength = (password) => {
    let strength = 0;

    if (password.length >= 8) strength += 1;
    if (password.match(/[a-z]/)) strength += 1;
    if (password.match(/[A-Z]/)) strength += 1;
    if (password.match(/[0-9]/)) strength += 1;
    if (password.match(/[^a-zA-Z0-9]/)) strength += 1;

    setPasswordStrength(strength);
  };

  const getPasswordStrengthText = () => {
    switch (passwordStrength) {
      case 0:
      case 1:
        return { text: 'Very Weak', color: '#ff4444' };
      case 2:
        return { text: 'Weak', color: '#ff8800' };
      case 3:
        return { text: 'Fair', color: '#ffdd00' };
      case 4:
        return { text: 'Good', color: '#88dd00' };
      case 5:
        return { text: 'Strong', color: '#00dd00' };
      default:
        return { text: '', color: '#ccc' };
    }
  };

  const passwordRequirements = [
    { text: 'At least 8 characters', met: formData.password?.length >= 8 },
    { text: 'Contains lowercase letter', met: /[a-z]/.test(formData.password || '') },
    { text: 'Contains uppercase letter', met: /[A-Z]/.test(formData.password || '') },
    { text: 'Contains number', met: /[0-9]/.test(formData.password || '') },
    { text: 'Contains special character', met: /[^a-zA-Z0-9]/.test(formData.password || '') }
  ];

  return (
    <div className="step-content account-security-step">
      <div className="step-header">
        <h2>Account Security Setup</h2>
        <p>Create your login credentials and set up security options</p>
      </div>

      <div className="form-sections">
        {/* Login Credentials */}
        <section className="form-section">
          <h3>üîê Login Credentials</h3>

          {/* Email Display */}
          <div className="form-group">
            <label>Login Email</label>
            <div className="email-display">
              <span className="email-text">{formData.email || 'Not provided'}</span>
              <span className="email-note">This will be your username</span>
            </div>
          </div>

          {/* Password */}
          <div className="form-group">
            <label htmlFor="password">
              Password <span className="required">*</span>
            </label>
            <div className="password-input-container">
              <input
                type={showPassword ? 'text' : 'password'}
                id="password"
                value={formData.password || ''}
                onChange={(e) => handleInputChange('password', e.target.value)}
                placeholder="Create a strong password"
                className={errors.password ? 'error' : ''}
              />
              <button
                type="button"
                className="password-toggle"
                onClick={() => setShowPassword(!showPassword)}
              >
                {showPassword ? 'üëÅÔ∏è' : 'üëÅÔ∏è‚Äçüó®Ô∏è'}
              </button>
            </div>

            {/* Password Strength Indicator */}
            {formData.password && (
              <div className="password-strength">
                <div className="strength-bar">
                  <div
                    className="strength-fill"
                    style={{
                      width: `${(passwordStrength / 5) * 100}%`,
                      backgroundColor: getPasswordStrengthText().color
                    }}
                  ></div>
                </div>
                <span
                  className="strength-text"
                  style={{ color: getPasswordStrengthText().color }}
                >
                  {getPasswordStrengthText().text}
                </span>
              </div>
            )}

            {/* Password Requirements */}
            <div className="password-requirements">
              <p>Password must contain:</p>
              <ul>
                {passwordRequirements.map((req, index) => (
                  <li key={index} className={req.met ? 'met' : 'unmet'}>
                    <span className="requirement-icon">
                      {req.met ? '‚úì' : '‚óã'}
                    </span>
                    {req.text}
                  </li>
                ))}
              </ul>
            </div>

            {errors.password && <span className="error-text">{errors.password}</span>}
          </div>

          {/* Confirm Password */}
          <div className="form-group">
            <label htmlFor="confirmPassword">
              Confirm Password <span className="required">*</span>
            </label>
            <div className="password-input-container">
              <input
                type={showConfirmPassword ? 'text' : 'password'}
                id="confirmPassword"
                value={formData.confirmPassword || ''}
                onChange={(e) => handleInputChange('confirmPassword', e.target.value)}
                placeholder="Confirm your password"
                className={errors.confirmPassword ? 'error' : ''}
              />
              <button
                type="button"
                className="password-toggle"
                onClick={() => setShowConfirmPassword(!showConfirmPassword)}
              >
                {showConfirmPassword ? 'üëÅÔ∏è' : 'üëÅÔ∏è‚Äçüó®Ô∏è'}
              </button>
            </div>

            {formData.confirmPassword && formData.password && (
              <div className={`password-match ${
                formData.password === formData.confirmPassword ? 'match' : 'no-match'
              }`}>
                {formData.password === formData.confirmPassword ? (
                  <span className="match-text">‚úì Passwords match</span>
                ) : (
                  <span className="no-match-text">‚úó Passwords don't match</span>
                )}
              </div>
            )}

            {errors.confirmPassword && (
              <span className="error-text">{errors.confirmPassword}</span>
            )}
          </div>
        </section>

        {/* Security Question */}
        <section className="form-section">
          <h3>üõ°Ô∏è Account Recovery</h3>
          <p className="section-description">
            Set up a security question to help recover your account if you forget your password
          </p>

          <div className="form-group">
            <label htmlFor="securityQuestion">
              Security Question <span className="required">*</span>
            </label>
            <select
              id="securityQuestion"
              value={formData.securityQuestion || ''}
              onChange={(e) => handleInputChange('securityQuestion', e.target.value)}
              className={errors.securityQuestion ? 'error' : ''}
            >
              <option value="">Select a security question</option>
              {securityQuestions.map((question, index) => (
                <option key={index} value={question}>
                  {question}
                </option>
              ))}
            </select>
            {errors.securityQuestion && (
              <span className="error-text">{errors.securityQuestion}</span>
            )}
          </div>

          <div className="form-group">
            <label htmlFor="securityAnswer">
              Security Answer <span className="required">*</span>
            </label>
            <input
              type="text"
              id="securityAnswer"
              value={formData.securityAnswer || ''}
              onChange={(e) => handleInputChange('securityAnswer', e.target.value)}
              placeholder="Enter your answer"
              className={errors.securityAnswer ? 'error' : ''}
            />
            <small>Remember this answer - it's case sensitive</small>
            {errors.securityAnswer && (
              <span className="error-text">{errors.securityAnswer}</span>
            )}
          </div>
        </section>

        {/* Terms and Agreements */}
        <section className="form-section">
          <h3>üìã Terms & Agreements</h3>

          <div className="checkbox-group">
            <label className="checkbox-container">
              <input
                type="checkbox"
                checked={formData.agreedToTerms || false}
                onChange={(e) => handleInputChange('agreedToTerms', e.target.checked)}
              />
              <span className="checkmark"></span>
              <span className="checkbox-text">
                I agree to the{' '}
                <a href="/terms" target="_blank" rel="noopener noreferrer">
                  Terms of Service
                </a>{' '}
                and{' '}
                <a href="/privacy" target="_blank" rel="noopener noreferrer">
                  Privacy Policy
                </a>{' '}
                <span className="required">*</span>
              </span>
            </label>
            {errors.agreedToTerms && (
              <span className="error-text">{errors.agreedToTerms}</span>
            )}
          </div>

          <div className="checkbox-group">
            <label className="checkbox-container">
              <input
                type="checkbox"
                checked={formData.marketingConsent || false}
                onChange={(e) => handleInputChange('marketingConsent', e.target.checked)}
              />
              <span className="checkmark"></span>
              <span className="checkbox-text">
                I would like to receive marketing emails about new features and promotions (optional)
              </span>
            </label>
          </div>
        </section>
      </div>

      {/* Security Tips */}
      <div className="security-tips">
        <h3>üîí Security Tips</h3>
        <div className="tips-grid">
          <div className="tip-item">
            <h4>Strong Password</h4>
            <p>Use a unique password that you don't use for other accounts. Consider using a password manager.</p>
          </div>
          <div className="tip-item">
            <h4>Security Question</h4>
            <p>Choose a question with an answer that won't change over time and that only you would know.</p>
          </div>
          <div className="tip-item">
            <h4>Account Safety</h4>
            <p>Never share your login credentials. We'll never ask for your password via email or phone.</p>
          </div>
        </div>
      </div>

      {/* What Happens Next */}
      <div className="next-steps">
        <h3>üöÄ What Happens Next?</h3>
        <div className="steps-timeline">
          <div className="timeline-step">
            <div className="step-number">1</div>
            <div className="step-content">
              <h4>Registration Review</h4>
              <p>We'll review your application and documents within 24-48 hours</p>
            </div>
          </div>
          <div className="timeline-step">
            <div className="step-number">2</div>
            <div className="step-content">
              <h4>Email Verification</h4>
              <p>Check your email for a verification link to activate your account</p>
            </div>
          </div>
          <div className="timeline-step">
            <div className="step-number">3</div>
            <div className="step-content">
              <h4>Start Selling</h4>
              <p>Once approved, you can set up your menu and start receiving orders</p>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default AccountSecurityStep;
