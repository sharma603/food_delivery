import React, { useState, useEffect } from 'react';
import {
  Search,
  CheckCircle,
  XCircle,
  Clock,
  Eye,
  FileText,
  MapPin,
  Phone,
  Mail,
  Calendar,
  Building2,
  AlertCircle,
  Check,
  X as CloseIcon,
  Download,
  ExternalLink,
  Filter
} from 'lucide-react';
import api from '../../../utils/api';

const RestaurantVerification = () => {
  const [restaurants, setRestaurants] = useState([]);
  const [loading, setLoading] = useState(true);
  const [searchTerm, setSearchTerm] = useState('');
  const [statusFilter, setStatusFilter] = useState('pending');
  const [selectedRestaurant, setSelectedRestaurant] = useState(null);
  const [showModal, setShowModal] = useState(false);
  const [actionLoading, setActionLoading] = useState(false);
  const [rejectionReason, setRejectionReason] = useState('');
  const [error, setError] = useState('');
  const [success, setSuccess] = useState('');

  useEffect(() => {
    fetchRestaurants();
  }, [statusFilter]);

  const fetchRestaurants = async () => {
    try {
      setLoading(true);
      const response = await api.get(`/admin/restaurants/verification?status=${statusFilter}`);
      console.log('✅ Verification Queue loaded:', response.data);
      setRestaurants(response.data.data || []);
      setError('');
    } catch (err) {
      console.error('❌ Failed to fetch verification queue:', err);
      setError(err.response?.data?.message || 'Failed to load restaurants');
    } finally {
      setLoading(false);
    }
  };

  const handleApprove = async (restaurantId) => {
    if (!window.confirm('Are you sure you want to APPROVE this restaurant?')) {
      return;
    }

    try {
      setActionLoading(true);
      const response = await api.put(`/admin/restaurants/verification/${restaurantId}`, {
        action: 'approve'
      });
      
      console.log('✅ Restaurant approved:', response.data);
      setSuccess('Restaurant approved successfully! ✅');
      setShowModal(false);
      setSelectedRestaurant(null);
      
      // Refresh list
      await fetchRestaurants();
      
      // Clear success message after 3 seconds
      setTimeout(() => setSuccess(''), 3000);
    } catch (err) {
      console.error('❌ Approval failed:', err);
      setError(err.response?.data?.message || 'Failed to approve restaurant');
    } finally {
      setActionLoading(false);
    }
  };

  const handleReject = async (restaurantId) => {
    if (!rejectionReason.trim()) {
      alert('Please provide a rejection reason');
      return;
    }

    if (!window.confirm('Are you sure you want to REJECT this restaurant?')) {
      return;
    }

    try {
      setActionLoading(true);
      const response = await api.put(`/admin/restaurants/verification/${restaurantId}`, {
        action: 'reject',
        rejectionReason: rejectionReason
      });
      
      console.log('✅ Restaurant rejected:', response.data);
      setSuccess('Restaurant rejected successfully');
      setShowModal(false);
      setSelectedRestaurant(null);
      setRejectionReason('');
      
      // Refresh list
      await fetchRestaurants();
      
      // Clear success message after 3 seconds
      setTimeout(() => setSuccess(''), 3000);
    } catch (err) {
      console.error('❌ Rejection failed:', err);
      setError(err.response?.data?.message || 'Failed to reject restaurant');
    } finally {
      setActionLoading(false);
    }
  };

  const openDetails = (restaurant) => {
    setSelectedRestaurant(restaurant);
    setShowModal(true);
    setRejectionReason('');
  };

  const closeModal = () => {
    setShowModal(false);
    setSelectedRestaurant(null);
    setRejectionReason('');
  };

  const filteredRestaurants = restaurants.filter(restaurant => {
    const searchLower = searchTerm.toLowerCase();
    return (
      restaurant.restaurantName?.toLowerCase().includes(searchLower) ||
      restaurant.ownerName?.toLowerCase().includes(searchLower) ||
      restaurant.email?.toLowerCase().includes(searchLower) ||
      restaurant.phone?.includes(searchTerm)
    );
  });

  const getStatusBadge = (status) => {
    switch (status) {
      case 'pending':
        return (
          <span className="inline-flex items-center px-3 py-1 rounded-full text-xs font-medium bg-yellow-100 text-yellow-800">
            <Clock className="w-3 h-3 mr-1" />
            Pending Verification
          </span>
        );
      case 'approved':
        return (
          <span className="inline-flex items-center px-3 py-1 rounded-full text-xs font-medium bg-green-100 text-green-800">
            <CheckCircle className="w-3 h-3 mr-1" />
            Approved
          </span>
        );
      case 'rejected':
        return (
          <span className="inline-flex items-center px-3 py-1 rounded-full text-xs font-medium bg-red-100 text-red-800">
            <XCircle className="w-3 h-3 mr-1" />
            Rejected
          </span>
        );
      default:
        return null;
    }
  };

  const getStatusCounts = () => {
    return {
      pending: restaurants.filter(r => r.verificationStatus === 'pending' || !r.isVerified).length,
      approved: restaurants.filter(r => r.verificationStatus === 'approved' && r.isVerified).length,
      rejected: restaurants.filter(r => r.verificationStatus === 'rejected').length,
    };
  };

  const statusCounts = getStatusCounts();

  if (loading) {
    return (
      <div className="flex items-center justify-center min-h-screen">
        <div className="text-center">
          <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto"></div>
          <p className="mt-4 text-gray-600">Loading verification queue...</p>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gray-50">
      {/* Header */}
      <div className="bg-white shadow">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-6">
          <div className="flex items-center justify-between">
            <div>
              <h1 className="text-3xl font-bold text-gray-900">Restaurant Verification</h1>
              <p className="mt-1 text-sm text-gray-500">Review and verify new restaurant registrations</p>
            </div>
            <div className="flex items-center space-x-2">
              <FileText className="w-8 h-8 text-blue-600" />
            </div>
          </div>
        </div>
      </div>

      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        {/* Success/Error Messages */}
        {success && (
          <div className="mb-4 bg-green-50 border border-green-200 text-green-800 px-4 py-3 rounded-lg flex items-center justify-between">
            <div className="flex items-center">
              <CheckCircle className="w-5 h-5 mr-2" />
              <span>{success}</span>
            </div>
            <button onClick={() => setSuccess('')} className="text-green-600 hover:text-green-800">
              <CloseIcon className="w-4 h-4" />
            </button>
          </div>
        )}

        {error && (
          <div className="mb-4 bg-red-50 border border-red-200 text-red-800 px-4 py-3 rounded-lg flex items-center justify-between">
            <div className="flex items-center">
              <AlertCircle className="w-5 h-5 mr-2" />
              <span>{error}</span>
            </div>
            <button onClick={() => setError('')} className="text-red-600 hover:text-red-800">
              <CloseIcon className="w-4 h-4" />
            </button>
          </div>
        )}

        {/* Status Tabs */}
        <div className="bg-white rounded-lg shadow mb-6">
          <div className="flex border-b border-gray-200">
            {[
              { key: 'pending', label: 'Pending', count: statusCounts.pending, icon: Clock },
              { key: 'approved', label: 'Approved', count: statusCounts.approved, icon: CheckCircle },
              { key: 'rejected', label: 'Rejected', count: statusCounts.rejected, icon: XCircle }
            ].map(({ key, label, count, icon: Icon }) => (
              <button
                key={key}
                onClick={() => setStatusFilter(key)}
                className={`flex-1 px-6 py-4 text-sm font-medium transition-colors ${
                  statusFilter === key
                    ? 'border-b-2 border-blue-600 text-blue-600 bg-blue-50'
                    : 'text-gray-600 hover:text-gray-800 hover:bg-gray-50'
                }`}
              >
                <div className="flex items-center justify-center space-x-2">
                  <Icon className="w-4 h-4" />
                  <span>{label}</span>
                  <span className={`px-2 py-0.5 rounded-full text-xs ${
                    statusFilter === key ? 'bg-blue-600 text-white' : 'bg-gray-200 text-gray-700'
                  }`}>
                    {count}
                  </span>
                </div>
              </button>
            ))}
          </div>
        </div>

        {/* Search Bar */}
        <div className="bg-white rounded-lg shadow p-4 mb-6">
          <div className="relative">
            <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-5 h-5" />
            <input
              type="text"
              placeholder="Search by restaurant name, owner, email, or phone..."
              value={searchTerm}
              onChange={(e) => setSearchTerm(e.target.value)}
              className="w-full pl-10 pr-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
            />
          </div>
        </div>

        {/* Restaurant Cards */}
        <div className="space-y-4">
          {filteredRestaurants.length === 0 ? (
            <div className="bg-white rounded-lg shadow p-12 text-center">
              <FileText className="w-16 h-16 text-gray-400 mx-auto mb-4" />
              <h3 className="text-lg font-medium text-gray-900 mb-2">No Restaurants Found</h3>
              <p className="text-gray-500">
                {searchTerm 
                  ? 'No restaurants match your search criteria'
                  : `No restaurants in ${statusFilter} status`
                }
              </p>
            </div>
          ) : (
            filteredRestaurants.map((restaurant) => (
              <div key={restaurant._id} className="bg-white rounded-lg shadow hover:shadow-md transition-shadow">
                <div className="p-6">
                  <div className="flex items-start justify-between">
                    <div className="flex-1">
                      <div className="flex items-center space-x-3 mb-3">
                        <Building2 className="w-6 h-6 text-blue-600" />
                        <h3 className="text-xl font-semibold text-gray-900">{restaurant.restaurantName}</h3>
                        {getStatusBadge(restaurant.verificationStatus || (restaurant.isVerified ? 'approved' : 'pending'))}
                      </div>

                      <div className="grid grid-cols-1 md:grid-cols-2 gap-4 text-sm text-gray-600">
                        <div className="flex items-center space-x-2">
                          <Mail className="w-4 h-4 text-gray-400" />
                          <span>{restaurant.email}</span>
                        </div>
                        <div className="flex items-center space-x-2">
                          <Phone className="w-4 h-4 text-gray-400" />
                          <span>{restaurant.phone}</span>
                        </div>
                        <div className="flex items-center space-x-2">
                          <MapPin className="w-4 h-4 text-gray-400" />
                          <span>{restaurant.address?.city}, {restaurant.address?.state}</span>
                        </div>
                        <div className="flex items-center space-x-2">
                          <Calendar className="w-4 h-4 text-gray-400" />
                          <span>Submitted: {new Date(restaurant.createdAt).toLocaleDateString()}</span>
                        </div>
                      </div>

                      {restaurant.rejectionReason && (
                        <div className="mt-3 p-3 bg-red-50 border border-red-200 rounded-lg">
                          <p className="text-sm text-red-800">
                            <strong>Rejection Reason:</strong> {restaurant.rejectionReason}
                          </p>
                        </div>
                      )}
                    </div>

                    <div className="ml-4 flex flex-col space-y-2">
                      <button
                        onClick={() => openDetails(restaurant)}
                        className="inline-flex items-center px-4 py-2 border border-gray-300 rounded-lg text-sm font-medium text-gray-700 bg-white hover:bg-gray-50 transition-colors"
                      >
                        <Eye className="w-4 h-4 mr-2" />
                        View Details
                      </button>

                      {statusFilter === 'pending' && (
                        <>
                          <button
                            onClick={() => handleApprove(restaurant._id)}
                            disabled={actionLoading}
                            className="inline-flex items-center px-4 py-2 border border-transparent rounded-lg text-sm font-medium text-white bg-green-600 hover:bg-green-700 transition-colors disabled:opacity-50"
                          >
                            <CheckCircle className="w-4 h-4 mr-2" />
                            {actionLoading ? 'Processing...' : 'Approve'}
                          </button>
                          <button
                            onClick={() => openDetails(restaurant)}
                            disabled={actionLoading}
                            className="inline-flex items-center px-4 py-2 border border-transparent rounded-lg text-sm font-medium text-white bg-red-600 hover:bg-red-700 transition-colors disabled:opacity-50"
                          >
                            <XCircle className="w-4 h-4 mr-2" />
                            Reject
                          </button>
                        </>
                      )}
                    </div>
                  </div>
                </div>
              </div>
            ))
          )}
        </div>
      </div>

      {/* Details Modal */}
      {showModal && selectedRestaurant && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
          <div className="bg-white rounded-lg shadow-xl max-w-4xl w-full max-h-[90vh] overflow-hidden">
            {/* Modal Header */}
            <div className="bg-blue-600 px-6 py-4 flex items-center justify-between">
              <h2 className="text-xl font-bold text-white">Restaurant Details</h2>
              <button
                onClick={closeModal}
                className="text-white hover:text-gray-200 transition-colors"
              >
                <CloseIcon className="w-6 h-6" />
              </button>
            </div>

            {/* Modal Body */}
            <div className="p-6 overflow-y-auto max-h-[calc(90vh-180px)]">
              <div className="space-y-6">
                {/* Basic Information */}
                <div>
                  <h3 className="text-lg font-semibold text-gray-900 mb-4 flex items-center">
                    <Building2 className="w-5 h-5 mr-2 text-blue-600" />
                    Basic Information
                  </h3>
                  <div className="grid grid-cols-2 gap-4 bg-gray-50 p-4 rounded-lg">
                    <div>
                      <label className="text-sm font-medium text-gray-500">Restaurant Name</label>
                      <p className="mt-1 text-gray-900">{selectedRestaurant.restaurantName}</p>
                    </div>
                    <div>
                      <label className="text-sm font-medium text-gray-500">Owner Name</label>
                      <p className="mt-1 text-gray-900">{selectedRestaurant.ownerName}</p>
                    </div>
                    <div>
                      <label className="text-sm font-medium text-gray-500">Email</label>
                      <p className="mt-1 text-gray-900">{selectedRestaurant.email}</p>
                    </div>
                    <div>
                      <label className="text-sm font-medium text-gray-500">Phone</label>
                      <p className="mt-1 text-gray-900">{selectedRestaurant.phone}</p>
                    </div>
                  </div>
                </div>

                {/* Address */}
                <div>
                  <h3 className="text-lg font-semibold text-gray-900 mb-4 flex items-center">
                    <MapPin className="w-5 h-5 mr-2 text-blue-600" />
                    Address
                  </h3>
                  <div className="bg-gray-50 p-4 rounded-lg">
                    <p className="text-gray-900">
                      {selectedRestaurant.address?.street}<br />
                      {selectedRestaurant.address?.city}, {selectedRestaurant.address?.state} {selectedRestaurant.address?.zipCode}
                    </p>
                  </div>
                </div>

                {/* Business Details */}
                <div>
                  <h3 className="text-lg font-semibold text-gray-900 mb-4 flex items-center">
                    <FileText className="w-5 h-5 mr-2 text-blue-600" />
                    Business Details
                  </h3>
                  <div className="grid grid-cols-2 gap-4 bg-gray-50 p-4 rounded-lg">
                    <div>
                      <label className="text-sm font-medium text-gray-500">Business License</label>
                      <p className="mt-1 text-gray-900">{selectedRestaurant.businessLicense || 'N/A'}</p>
                    </div>
                    <div>
                      <label className="text-sm font-medium text-gray-500">Tax ID</label>
                      <p className="mt-1 text-gray-900">{selectedRestaurant.taxId || 'N/A'}</p>
                    </div>
                    <div>
                      <label className="text-sm font-medium text-gray-500">Cuisine Type</label>
                      <p className="mt-1 text-gray-900">{selectedRestaurant.cuisine?.join(', ') || 'N/A'}</p>
                    </div>
                    <div>
                      <label className="text-sm font-medium text-gray-500">Submission Date</label>
                      <p className="mt-1 text-gray-900">
                        {new Date(selectedRestaurant.createdAt).toLocaleString()}
                      </p>
                    </div>
                  </div>
                </div>

                {/* Description */}
                {selectedRestaurant.description && (
                  <div>
                    <h3 className="text-lg font-semibold text-gray-900 mb-4">Description</h3>
                    <div className="bg-gray-50 p-4 rounded-lg">
                      <p className="text-gray-900">{selectedRestaurant.description}</p>
                    </div>
                  </div>
                )}

                {/* Rejection Section (if pending) */}
                {statusFilter === 'pending' && (
                  <div className="border-t pt-6">
                    <h3 className="text-lg font-semibold text-gray-900 mb-4">Rejection Reason (Optional)</h3>
                    <textarea
                      value={rejectionReason}
                      onChange={(e) => setRejectionReason(e.target.value)}
                      placeholder="Enter reason for rejection (e.g., Invalid business license, Incomplete documents, etc.)"
                      className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                      rows="4"
                    />
                  </div>
                )}
              </div>
            </div>

            {/* Modal Footer */}
            {statusFilter === 'pending' && (
              <div className="bg-gray-50 px-6 py-4 flex items-center justify-end space-x-3 border-t">
                <button
                  onClick={closeModal}
                  className="px-6 py-2 border border-gray-300 rounded-lg text-sm font-medium text-gray-700 bg-white hover:bg-gray-50 transition-colors"
                >
                  Cancel
                </button>
                <button
                  onClick={() => handleReject(selectedRestaurant._id)}
                  disabled={actionLoading}
                  className="px-6 py-2 border border-transparent rounded-lg text-sm font-medium text-white bg-red-600 hover:bg-red-700 transition-colors disabled:opacity-50 flex items-center"
                >
                  <XCircle className="w-4 h-4 mr-2" />
                  {actionLoading ? 'Rejecting...' : 'Reject Restaurant'}
                </button>
                <button
                  onClick={() => handleApprove(selectedRestaurant._id)}
                  disabled={actionLoading}
                  className="px-6 py-2 border border-transparent rounded-lg text-sm font-medium text-white bg-green-600 hover:bg-green-700 transition-colors disabled:opacity-50 flex items-center"
                >
                  <CheckCircle className="w-4 h-4 mr-2" />
                  {actionLoading ? 'Approving...' : 'Approve Restaurant'}
                </button>
              </div>
            )}
          </div>
        </div>
      )}
    </div>
  );
};

export default RestaurantVerification;


